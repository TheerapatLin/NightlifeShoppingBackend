const mongoose = require("mongoose");
const { Schema, model, Types } = mongoose;

const userDealSchema = new Schema(
  {
    // üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ
    userId: { type: Types.ObjectId, ref: "User", required: true },

    // üîó ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏î‡∏µ‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    dealId: { type: Types.ObjectId, ref: "Deal", required: true },

    // üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏•
    claimedAt: { type: Date, default: Date.now },

    // üí∏ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏• (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ promo ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user)
    pricePaid: { type: Number, required: true },

    // üî¢ ‡πÄ‡∏•‡∏Ç serial ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° session)
    useSerialNumber: { type: Number },

    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏î‡∏µ‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    isUsed: { type: Boolean, default: false },

    // üî¢ ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
    usedCount: { type: Number, default: 0 },

    // üïì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏î‡∏µ‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    lastUsedAt: { type: Date, default: null },

    // üïì ‡πÉ‡∏ä‡πâ‡∏î‡∏µ‡∏•‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (session-based ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
    isActiveSession: { type: Boolean, default: false },

    // ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö isActiveSession)
    activeSessionExpiresAt: { type: Date, default: null },

    // üí≥ ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (true = ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß, false = ‡∏¢‡∏±‡∏á)
    isPaid: { type: Boolean, default: true },

    // üßæ ID ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Stripe, QR, ‡∏Ø‡∏•‡∏Ø)
    paymentId: { type: String, default: null },

    // üìÜ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ instance ‡∏Ç‡∏≠‡∏á user)
    expirationDate: { type: Date, default: null },

    // ‚ùå ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠ admin ‡πÑ‡∏´‡∏°
    isRevoked: { type: Boolean, default: false },

    // üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ admin
    platformNote: { type: String, default: "" },

    // üß© ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô device, referrer, ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ
    metadata: { type: Map, of: String, default: {} },
  },
  {
    timestamps: true, // adds createdAt and updatedAt
  }
);

// üîí Unique serial number ‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏• (‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏î‡∏µ‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
userDealSchema.index({ dealId: 1, useSerialNumber: 1 }, { unique: true, sparse: true });

// üèÉ‚Äç‚ôÇÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß query ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
userDealSchema.index({ userId: 1, dealId: 1 }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡∏µ‡∏•‡∏Ç‡∏≠‡∏á user
userDealSchema.index({ isActiveSession: 1, activeSessionExpiresAt: 1 }); // session ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î
userDealSchema.index({ expirationDate: 1 }); // ‡∏î‡∏µ‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏

module.exports = model("UserDeal", userDealSchema);
