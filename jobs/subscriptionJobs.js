// jobs/subscriptionJobs.js
const cron = require('node-cron');
const { 
  queueCleanupExpiredSubscriptions, 
  notifyExpiringSubscriptions,
  getSubscriptionStats 
} = require('../utils/subscriptionUtils');

// ===============================
// CRON JOBS
// ===============================

/**
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î subscription ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 02:00 ‡∏ô.
 */
const startExpiredSubscriptionCleanup = () => {
  cron.schedule('0 2 * * *', async () => {
    console.log('üîÑ Starting expired subscription cleanup...');
    try {
      await queueCleanupExpiredSubscriptions();
      console.log('‚úÖ Expired subscription cleanup completed');
    } catch (error) {
      console.error('‚ùå Error in expired subscription cleanup:', error);
    }
  });
  
  console.log('üìÖ Expired subscription cleanup job scheduled (daily at 02:00)');
};

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô subscription ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô.
 */
const startExpiryNotificationJob = () => {
  cron.schedule('0 9 * * *', async () => {
    console.log('üîî Starting expiry notification job...');
    try {
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 7 ‡∏ß‡∏±‡∏ô
      await notifyExpiringSubscriptions(7);
      
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏±‡∏ô
      await notifyExpiringSubscriptions(1);
      
      console.log('‚úÖ Expiry notification job completed');
    } catch (error) {
      console.error('‚ùå Error in expiry notification job:', error);
    }
  });
  
  console.log('üìÖ Expiry notification job scheduled (daily at 09:00)');
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ subscription
 * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡πÄ‡∏ß‡∏•‡∏≤ 08:00 ‡∏ô.
 */
const startWeeklyStatsJob = () => {
  cron.schedule('0 8 * * 1', async () => {
    console.log('üìä Starting weekly subscription stats job...');
    try {
      const stats = await getSubscriptionStats();
      
      console.log('üìà Weekly Subscription Stats:', {
        totalActive: stats.totalActive,
        premiumActive: stats.premiumActive,
        platinumActive: stats.platinumActive,
        totalRevenue: stats.totalRevenue,
        monthlyRevenue: stats.monthlyRevenue,
        yearlyRevenue: stats.yearlyRevenue
      });
      
      // TODO: ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin email ‡∏´‡∏£‡∏∑‡∏≠ dashboard
      
      console.log('‚úÖ Weekly subscription stats job completed');
    } catch (error) {
      console.error('‚ùå Error in weekly stats job:', error);
    }
  });
  
  console.log('üìÖ Weekly subscription stats job scheduled (Mondays at 08:00)');
};

/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô cron jobs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
const startAllSubscriptionJobs = () => {
  console.log('üöÄ Starting all subscription cron jobs...');
  
  startExpiredSubscriptionCleanup();
  startExpiryNotificationJob();
  startWeeklyStatsJob();
  
  console.log('‚úÖ All subscription cron jobs started successfully');
};

/**
 * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô cleanup ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing ‡∏´‡∏£‡∏∑‡∏≠ manual run)
 */
const runImmediateCleanup = async () => {
  console.log('üîÑ Running immediate subscription cleanup...');
  try {
    await queueCleanupExpiredSubscriptions();
    console.log('‚úÖ Immediate cleanup completed');
  } catch (error) {
    console.error('‚ùå Error in immediate cleanup:', error);
    throw error;
  }
};

/**
 * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô notification ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing ‡∏´‡∏£‡∏∑‡∏≠ manual run)
 */
const runImmediateNotification = async (days = 7) => {
  console.log(`üîî Running immediate expiry notification (${days} days)...`);
  try {
    const expiring = await notifyExpiringSubscriptions(days);
    console.log(`‚úÖ Immediate notification completed. Found ${expiring.length} expiring subscriptions`);
    return expiring;
  } catch (error) {
    console.error('‚ùå Error in immediate notification:', error);
    throw error;
  }
};

module.exports = {
  startAllSubscriptionJobs,
  startExpiredSubscriptionCleanup,
  startExpiryNotificationJob,
  startWeeklyStatsJob,
  runImmediateCleanup,
  runImmediateNotification
};
