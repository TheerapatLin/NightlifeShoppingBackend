const OSS = require("ali-oss");

const OSSStorage = new OSS({
  endpoint: process.env.OSS_ENDPOINT,
  accessKeyId: process.env.OSS_ACCESS_KEY_ID,
  accessKeySecret: process.env.OSS_ACCESS_KEY_SECRET,
  bucket: process.env.OSS_BUCKET_NAME,
});

/**
 * ‡∏≠‡∏±‡∏û‡πÇ‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á OSS
 * @param {Buffer} buffer - ‡πÑ‡∏ü‡∏•‡πå buffer
 * @param {string} fileName - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö OSS
 * @param {string} mimeType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
 * @returns {Promise<string>} - URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
 */
const uploadToOSS = async (buffer, fileName, mimeType) => {
  try {
    console.log(`üì§ Uploading file: ${fileName}, type: ${mimeType}, size: ${buffer.length} bytes`);
    
    const result = await OSSStorage.put(fileName, buffer, {
      headers: {
        'Content-Type': mimeType,
        'Cache-Control': 'public, max-age=31536000', // 1 year cache
      },
    });

    console.log(`‚úÖ File uploaded successfully: ${result.url}`);
    return result.url;
  } catch (error) {
    console.error('‚ùå OSS Upload Error:', error);
    throw new Error(`Failed to upload file to OSS: ${error.message}`);
  }
};

/**
 * ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å OSS
 * @param {string} fileName - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
 * @returns {Promise<boolean>} - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 */
const deleteFromOSS = async (fileName) => {
  try {
    console.log(`üóëÔ∏è Deleting file: ${fileName}`);
    await OSSStorage.delete(fileName);
    console.log(`‚úÖ File deleted successfully: ${fileName}`);
    return true;
  } catch (error) {
    console.error('‚ùå OSS Delete Error:', error);
    throw new Error(`Failed to delete file from OSS: ${error.message}`);
  }
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á signed URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
 * @param {string} fileName - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
 * @param {number} expires - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) default 3600 (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
 * @returns {string} - Signed URL
 */
const getSignedUrl = (fileName, expires = 3600) => {
  try {
    const url = OSSStorage.signatureUrl(fileName, { expires });
    console.log(`üîó Generated signed URL for: ${fileName}`);
    return url;
  } catch (error) {
    console.error('‚ùå OSS Signed URL Error:', error);
    throw new Error(`Failed to generate signed URL: ${error.message}`);
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} fileName - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
 * @returns {Promise<boolean>} - true ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 */
const fileExists = async (fileName) => {
  try {
    await OSSStorage.head(fileName);
    return true;
  } catch (error) {
    if (error.code === 'NoSuchKey') {
      return false;
    }
    throw error;
  }
};

/**
 * ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
 * @param {string} prefix - prefix ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
 * @returns {Promise<number>} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö
 */
const deleteFolder = async (prefix) => {
  try {
    console.log(`üóëÔ∏è Deleting folder: ${prefix}`);
    
    const list = await OSSStorage.list({ prefix });
    if (!list.objects || list.objects.length === 0) {
      console.log(`üìÅ Folder ${prefix} is empty or doesn't exist`);
      return 0;
    }

    const deletePromises = list.objects.map(obj => OSSStorage.delete(obj.name));
    await Promise.all(deletePromises);
    
    console.log(`‚úÖ Deleted ${list.objects.length} files from folder: ${prefix}`);
    return list.objects.length;
  } catch (error) {
    console.error('‚ùå OSS Delete Folder Error:', error);
    throw new Error(`Failed to delete folder from OSS: ${error.message}`);
  }
};

module.exports = { 
  OSSStorage,
  uploadToOSS,
  deleteFromOSS,
  getSignedUrl,
  fileExists,
  deleteFolder
};