#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');
const socketIo = require('socket.io');
const debug = require('debug')('HiddengemCourse-Backend:server');

// อ่านค่า USE_HTTPS จาก environment variables (ค่าดีฟอลต์คือ false)
const useHttps = process.env.USE_HTTPS === 'true';

const port = normalizePort(process.env.PORT || '3111');
app.set('port', port);

let server; // สำหรับเก็บ instance ของ server

if (useHttps) {
  // ตัวเลือก HTTPS
  const options = {
    key: fs.readFileSync(path.join(__dirname, 'localhost-key.pem')),
    cert: fs.readFileSync(path.join(__dirname, 'localhost-cert.pem'))
  };

  server = https.createServer(options, app);
  console.log('Starting server in HTTPS mode');
} else {
  // ตัวเลือก HTTP
  server = http.createServer(app);
  console.log('Starting server in HTTP mode');
}

const io = socketIo(server);

// ทำให้ io instance พร้อมใช้งานใน controllers
app.set('io', io);

// Online users map
const onlineUsers = new Map();

io.on('connection', (socket) => {
  console.log('🔌 🔥 USER CONNECTED TO WEBSOCKET:', socket.id);
  
  // Authentication event
  socket.on('authenticate', async (data) => {
    try {
      console.log('🔐 🔥 AUTHENTICATE EVENT RECEIVED:', data);
      const { token } = data;
      
      if (!token) {
        socket.emit('error', { message: 'Token is required' });
        return;
      }

      // Verify JWT token
      const jwt = require('jsonwebtoken');
      const decoded = jwt.verify(token, process.env.JWT_ACCESS_TOKEN_SECRET);
      const verifiedUserId = decoded.userId || decoded._id;
      
      socket.userId = verifiedUserId;
      socket.authenticated = true;
      
      console.log(`🔐 JWT verified - User ID: ${verifiedUserId}`);
      
      // Add to online users
      onlineUsers.set(verifiedUserId, {
        socketId: socket.id,
        userId: verifiedUserId,
        connectedAt: new Date(),
        status: "online"
      });
      
      socket.emit("authenticated", {
        message: "Authentication successful",
        userId: verifiedUserId
      });
      
      socket.broadcast.emit("user_online", { userId: verifiedUserId });
      console.log(`✅ User ${verifiedUserId} authenticated with socket ${socket.id}`);
      
    } catch (error) {
      console.error('❌ Authentication error:', error);
      socket.emit('error', { message: 'Authentication failed' });
    }
  });

  // Join chat room event
  socket.on('join_chat', async (data) => {
    try {
      console.log('🏠 🔥 JOIN_CHAT EVENT RECEIVED:', data);
      
      if (!socket.authenticated) {
        socket.emit('error', { message: 'Not authenticated' });
        return;
      }

      const { chatRoomId } = data;
      if (!chatRoomId) {
        socket.emit('error', { message: 'Chat room ID is required' });
        return;
      }

      // Verify user is participant of this chat room
      const ChatRoom = require('../schemas/v1/chat.schema').ChatRoom;
      const chatRoom = await ChatRoom.findById(chatRoomId);
      
      if (!chatRoom) {
        socket.emit('error', { message: 'Chat room not found' });
        return;
      }

      const isParticipant = chatRoom.participants.some(
        p => p.userId.toString() === socket.userId.toString() && p.isActive
      );

      if (!isParticipant) {
        socket.emit('error', { message: 'Not authorized to join this room' });
        return;
      }

      // Join the room
      socket.join(chatRoomId);
      console.log(`🏠 ✅ User ${socket.userId} joined chat room: ${chatRoomId}`);
      
      socket.emit('joined_chat', { 
        message: 'Successfully joined chat room',
        chatRoomId: chatRoomId
      });

    } catch (error) {
      console.error('❌ Join chat error:', error);
      socket.emit('error', { message: 'Failed to join chat room' });
    }
  });

  // Disconnect event
  socket.on('disconnect', () => {
    console.log('❌ User disconnected from socket.io');
    
    if (socket.userId) {
      onlineUsers.delete(socket.userId);
      socket.broadcast.emit("user_offline", { userId: socket.userId });
      console.log(`👋 User ${socket.userId} went offline`);
    }
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Listening on ${bind}`);
  debug('Listening on ' + bind);
}
