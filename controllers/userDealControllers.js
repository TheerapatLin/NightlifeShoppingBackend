const UserDeal = require("../schemas/v1/userdeal.schema");
const Deal = require("../schemas/v1/deal.schema");
const mongoose = require("mongoose");

exports.claimDeal = async (req, res) => {
  try {
    const { dealId } = req.body;
    const userId = req.user.userId;

    // üìå 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dealId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!mongoose.Types.ObjectId.isValid(dealId)) {
      console.log("dealId ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ObjectId");
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö dealId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // üìå 2. ‡∏î‡∏∂‡∏á‡∏î‡∏µ‡∏•‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const deal = await Deal.findById(dealId);
    console.log(`dealId = ${dealId}`);
    console.log(`deal = ${deal}`);

    if (!deal || !deal.isActive || !deal.isPublished) {
      return res.status(404).json({ error: "‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" });
    }

    const now = new Date();

    // üìå 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏°
    if (
      (deal.claimStartDate && now < deal.claimStartDate) ||
      (deal.claimEndDate && now > deal.claimEndDate)
    ) {
      return res
        .status(400)
        .json({ error: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // üìå 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏î‡∏µ‡∏•‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (totalAvailable)
    if (
      deal.totalAvailable !== null &&
      deal.totalClaimed >= deal.totalAvailable
    ) {
      return res.status(400).json({ error: "‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // üìå 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏•‡∏°‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const existingClaimCount = await UserDeal.countDocuments({
      userId,
      dealId,
      isRevoked: false,
    });

    if (
      deal.usageLimitPerUser !== null &&
      existingClaimCount >= deal.usageLimitPerUser
    ) {
      return res.status(400).json({
        error: "‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ñ‡∏•‡∏°‡∏î‡∏µ‡∏•‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
        errorCode: "claimLimitExceeded",
      });
    }

    // üìå 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user
    const expirationDate = deal.expirationDaysAfterClaim
      ? new Date(now.getTime() + deal.expirationDaysAfterClaim * 86400000)
      : deal.fixedExpirationDate || null;

    // üìå 7. ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á UserDeal (‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ useSerialNumber ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î)
    const userDeal = new UserDeal({
      userId,
      dealId,
      pricePaid: deal.price,
      expirationDate,
      isPaid: deal.price > 0,
      metadata: {
        referrer: req.headers.referer || null,
        userAgent: req.headers["user-agent"] || null,
      },
    });

    // üìå 8. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î totalClaimed ‡πÉ‡∏ô‡∏î‡∏µ‡∏•
    deal.totalClaimed += 1;

    // üìå 9. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á userDeal ‡πÅ‡∏•‡∏∞ deal
    await Promise.all([userDeal.save(), deal.save()]);

    res.status(201).json(userDeal);
  } catch (err) {
    console.error("‚ùå Error claiming deal:", err);
    res.status(400).json({ error: err.message });
  }
};

exports.getUserDeals = async (req, res) => {
  try {
    const userId = req.params.userId;
    const deals = await UserDeal.find({ userId })
      .populate("dealId")
      .sort({ claimedAt: -1 });
    res.status(200).json(deals);
  } catch (err) {
    console.error("Error fetching user deals:", err);
    res.status(500).json({ error: "Internal server error" });
  }
};

exports.getUserDealsByUserId = async (req, res) => {
  try {
    const userDeals = await UserDeal.find({ userId: req.params.id }).populate(
      "dealId"
    );
    if (!userDeals || userDeals.length === 0) {
      return res.status(404).json({ error: "No deals found for this user" });
    }
    res.status(200).json(userDeals);
  } catch (err) {
    console.error("Error fetching user deals:", err);
    res.status(500).json({ error: "Internal server error" });
  }
};

exports.useUserDeal = async (req, res) => {
  try {
    const userDeal = await UserDeal.findById(req.params.id);
    if (!userDeal)
      return res.status(404).json({ error: "User deal not found" });
    if (userDeal.isUsed) return res.status(400).json({ error: "Already used" });

    userDeal.isUsed = true;
    userDeal.usedAt = new Date();

    await userDeal.save();
    res.status(200).json({ message: "Deal marked as used", userDeal });
  } catch (err) {
    console.error("Error marking deal as used:", err);
    res.status(500).json({ error: err.message });
  }
};

exports.deleteUserDeal = async (req, res) => {
  try {
    const deleted = await UserDeal.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ error: "User deal not found" });
    res.status(200).json({ message: "User deal deleted" });
  } catch (err) {
    console.error("Error deleting user deal:", err);
    res.status(500).json({ error: err.message });
  }
};

// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î serial number, session, ‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏á webhook
exports.startUserDealSession = async (req, res) => {
  const session = await mongoose.startSession();
  let serialNumber, expiresAt, userDeal, deal;

  try {
    const { userDealId } = req.body;
    const userId = req.user.userId;

    await session.withTransaction(async () => {
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user deal ‡πÅ‡∏•‡∏∞‡∏î‡∏µ‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
      userDeal = await UserDeal.findOne({ _id: userDealId, userId }).session(
        session
      );
      if (!userDeal) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö user deal ‡∏ô‡∏µ‡πâ");
      if (userDeal.isActiveSession) throw new Error("session ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");

      deal = await Deal.findById(userDeal.dealId).session(session);
      if (!deal) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö deal ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á");

      // ‚è≥ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ session
      const now = new Date();
      expiresAt = deal.expirationAfterUseMinutes
        ? new Date(now.getTime() + deal.expirationAfterUseMinutes * 60000)
        : null;

      // üî¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î serial ‡πÅ‡∏•‡∏∞ session
      userDeal.isActiveSession = true;
      userDeal.activeSessionExpiresAt = expiresAt;
      userDeal.useSerialNumber = deal.nextUseSerial;
      serialNumber = deal.nextUseSerial;
      userDeal.lastUsedAt = new Date();

      // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° serial ‡πÑ‡∏õ‡∏¢‡∏±‡∏á deal
      deal.nextUseSerial += 1;

      await Promise.all([userDeal.save({ session }), deal.save({ session })]);
    });

    // üîΩ Webhook ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏î‡∏µ‡∏• (backend ‚Üí backend ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    if (process.env.WEBHOOK_ON_DEAL_USE) {
      try {
        await axios.post(
          process.env.WEBHOOK_ON_DEAL_USE,
          {
            userDealId: userDeal._id,
            dealId: deal._id,
            userId: userDeal.userId,
            serialNumber: serialNumber,
            expiresAt: expiresAt,
            timestamp: new Date().toISOString(),
          },
          {
            headers: {
              "x-webhook-secret": process.env.WEBHOOK_SECRET,
            },
          }
        );
      } catch (err) {
        console.warn("‚ö†Ô∏è Webhook failed:", err.message);
      }
    }

    res.status(200).json({
      message: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
      serialNumber,
      expiresAt,
    });
  } catch (err) {
    console.error("üî• Transaction failed:", err);
    res.status(400).json({ error: err.message });
  } finally {
    session.endSession();
  }
};
